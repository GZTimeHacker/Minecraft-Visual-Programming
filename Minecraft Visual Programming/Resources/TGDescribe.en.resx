<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="bred_animals" xml:space="preserve">
    <value>Triggers after the player breeds 2 animals</value>
  </data>
  <data name="brewed_potion" xml:space="preserve">
    <value>Triggers after the player takes a potion out of a brewing stand</value>
  </data>
  <data name="changed_dimension" xml:space="preserve">
    <value>Triggers after the player travels between two dimensions</value>
  </data>
  <data name="construct_beacon" xml:space="preserve">
    <value>Triggers after the player changes the structure of a beacon</value>
  </data>
  <data name="consume_item" xml:space="preserve">
    <value>Triggers when the player consumes an item</value>
  </data>
  <data name="cured_zombie_villager" xml:space="preserve">
    <value>Triggers when the player cures a zombie villager</value>
  </data>
  <data name="effects_changed" xml:space="preserve">
    <value>Triggers after the player gets a status effect applied or taken from them</value>
  </data>
  <data name="enchanted_item" xml:space="preserve">
    <value>Triggers after the player enchants an item through an enchanting table (does not get triggered through an anvil, or through commands)</value>
  </data>
  <data name="enter_block" xml:space="preserve">
    <value>Triggers when the player stands in a block</value>
  </data>
  <data name="entity_hurt_player" xml:space="preserve">
    <value>Triggers after a player gets hurt</value>
  </data>
  <data name="entity_killed_player" xml:space="preserve">
    <value>Triggers after an entity kills a player</value>
  </data>
  <data name="impossible" xml:space="preserve">
    <value>impossible,Triggers only using commands</value>
  </data>
  <data name="inventory_changed" xml:space="preserve">
    <value>Triggers after any changes happen to the player's inventory</value>
  </data>
  <data name="item_durability_changed" xml:space="preserve">
    <value>Triggers after any item in the inventory has been damaged in any form</value>
  </data>
  <data name="levitation" xml:space="preserve">
    <value>Triggers when the player has the levitation status effect</value>
  </data>
  <data name="location" xml:space="preserve">
    <value>Triggers every 20 ticks (1 second) and checks where the player is</value>
  </data>
  <data name="nether_travel" xml:space="preserve">
    <value>Triggers when the player travels to the Nether and then returns to the Overworld</value>
  </data>
  <data name="placed_block" xml:space="preserve">
    <value>Triggers when the player placed a block</value>
  </data>
  <data name="player_hurt_entity" xml:space="preserve">
    <value>Triggers after the player hurts a mob or player</value>
  </data>
  <data name="player_killed_entity" xml:space="preserve">
    <value>Triggers after a player is the source of a mob or player being killed</value>
  </data>
  <data name="recipe_unlocked" xml:space="preserve">
    <value>Triggers after the player unlocks a recipe (using a knowledge book for example)</value>
  </data>
  <data name="slept_in_bed" xml:space="preserve">
    <value>Triggers when the player enters a bed</value>
  </data>
  <data name="summoned_entity" xml:space="preserve">
    <value>Triggers after an entity has been summoned</value>
  </data>
  <data name="tame_animal" xml:space="preserve">
    <value>Triggers after the player tames an animal</value>
  </data>
  <data name="tick" xml:space="preserve">
    <value>Triggers every tick (20 times a second)</value>
  </data>
  <data name="used_ender_eye" xml:space="preserve">
    <value>Triggers when the player uses an eye of ender (in a world where strongholds generate)</value>
  </data>
  <data name="used_totem" xml:space="preserve">
    <value>Triggers when the players uses a totem</value>
  </data>
  <data name="villager_trade" xml:space="preserve">
    <value>Triggers after the player trades with a villager</value>
  </data>
</root>